name: Android Build and Deployment Pipeline # optional

on: # on [Events]
  # always push on developer's dev branch after then we do PR into feature from dev,
  # and then PR into release from feature, and then PR into master from release
  push:
    branches: [ 'dev/*', 'feature/*' ]
  pull_request:
    branches: [ 'release/*', 'feature/*' ]

  # Add support for manual trigger
  workflow_dispatch: # event
    inputs: # provide these below information variables as inputs
      # similar to inputs, we can have outputs, runs -- runs defines what to run before main actions e.g., running
      # scripts, running prerequisites etc.
      app_id:
        description: 'The application Id/package name'
        required: true
      branch:
        description: 'The branch from which you want the build'
        required: true
        default: 'release/v1' # just one default branch, we checkout and build

jobs: # groups
  Android-CI_CD: # job name, any name. Give proper name
    runs-on: ubuntu-latest # runs-on: Runner
    steps: # keyword name
      # follows these steps on order

      - name: Checkout the code to specific branch
        uses: actions/checkout@v3 # uses: actions/actual_action
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Print Current Working Directory
        run: echo "${GITHUB_WORKSPACE}"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Generate Apk
        run: ./gradlew app:assembleRelease --stacktrace

      - name: Sign apk
        run: |
          jarsigner -keystore ${GITHUB_WORKSPACE}/app/secrets/mviKeyStore.jks -storepass ${{ secrets.KEY_STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} app/build/outputs/apk/retailStage/debug/app-retail-stage-release.apk "myMVIApk"

  #   STEP 2 : Upload the Artifact
  upload:
    needs: [ Android-CI_CD ]
    name: Upload the signed artifact
    runs-on: self-hosted
    steps:
      - name: Upload Apk
        uses: actions/upload-artifact@v3
        with:
          name: signed_apk
          path: app/build/outputs/apk/retailStage/debug/app-retail-stage-release.apk



# Step 3 : Release to playstore
#  deploy:
#    needs: [ build ]
#    name: Create release on Playstore
#    runs-on: self-hosted
#    steps:
#      - name: Create service_account.json
#        run: echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' > service_account.json
#
#      - name: Deploy to Play Store
#        uses: r0adkll/upload-google-play@v1.0.15
#        with:
#          serviceAccountJson: service_account.json
#          packageName: ${{ github.event.inputs.app_id }}
#          releaseFiles: app/build/outputs/bundle/release/*.aab
#          track: internal
#          whatsNewDirectory: whatsnew/
#          mappingFile: app/build/outputs/mapping/release/mapping.txt
#          inAppUpdatePriority: 5