import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.android")
    id("com.google.dagger.hilt.android")
    id("kotlin-kapt")
    id("maven-publish")
    //spotbugs configure in this file, while sonarqube, we can't use plugins block
    id("com.github.spotbugs") version '5.0.14'
    id("org.sonarqube") version "4.0.0.2929"
}

apply(from: "$rootDir/config/jacoco/jacoco.gradle")
apply(from: "$rootDir/config/sonarqube/sonarqube_agemodule.gradle")
apply(from: "$rootDir/scripts/utils.gradle") //for buildNumber

apply(from: "$rootDir/config/checkstyle/checkstyle.gradle.kts")
apply(from: "$rootDir/config/pmd/pmd.gradle.kts")


android {
    namespace = "com.mvi.agemodule"
    compileSdk = 34
    ndkVersion = "25.2.9519653"

    kapt {
        javacOptions {
            option("-Xmaxerrs", 500)
            option("-Xlint:deprecation", true)
            option("-Xlint:unchecked", true)
        }
        arguments {
            arg("plugin", "org.jetbrains.kotlin.kapt3:kotlin-allopen")
            arg("plugin", "org.jetbrains.kotlin.kapt3:kotlin-noarg")
        }
        useBuildCache = true
    }

    lintOptions {
        disable("TypographyFractions", "TypographyQuotes")
        enable("RtlHardcoded", "RtlCompat", "RtlEnabled")
        checkOnly("NewApi", "InlinedApi")
        quiet = true
        abortOnError = true
        ignoreWarnings = true

        checkDependencies true
        xmlReport true
        htmlReport true
        xmlOutput file("${projectDir}/build/reports/lint/android_lint.xml")

        lintConfig file("$rootDir/config/lint/lint.xml")
    }

    defaultConfig {
        minSdk = 21
        targetSdk = 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }

        aarMetadata {
            minCompileSdk = 34
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    buildFeatures {
        compose = true
    }

    composeOptions {
        //https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        kotlinCompilerExtensionVersion = "1.4.8"
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    testFixtures {
        enable = true
    }

    //no application id for libraries
    buildTypes {

        debug {
            debuggable = true
            jniDebuggable = true
            minifyEnabled = false
            shrinkResources = false

            matchingFallbacks = ["debug"]
            versionNameSuffix = "$buildNumber"
            signingConfig = signingConfigs.debug
        }

        release {
            debuggable = false
            jniDebuggable = false
            minifyEnabled = true
            shrinkResources = false //for libraries
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")

            matchingFallbacks = ["release"]
            versionNameSuffix = "$buildNumber"
            signingConfig = signingConfigs.debug
        }

        enterpriseQa {
            initWith(debug) //copies everything from debug buildTypes
            renderscriptDebuggable = true
            renderscriptOptimLevel = 3
            signingConfig = signingConfigs.debug
        }

    }

    publishing {
        //multivariate
        multipleVariants() {
            allVariants()
            withSourcesJar()
            withJavadocJar()
        }
    }
    buildToolsVersion "34.0.0"


    //spotbugs configuration
    spotbugs {
        ignoreFailures = false
        showStackTraces = true
        showProgress = true
        effort = 'default' //max
        reportLevel = 'default' //high
        visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
        omitVisitors = [ 'FindNonShortCircuit' ]
        reportsDir = file("$buildDir/reports/spotbugs")
        //includeFilter = file("include.xml")
        excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
        //baselineFile = file("baseline.xml")
        //onlyAnalyze = [ 'com.foobar.MyClass', 'com.foobar.mypkg.*' ]
        maxHeapSize = '4g'
        extraArgs = [ '-nested:false' ]
        jvmArgs = [ '-Duser.language=ja' ]
    }
    // Define SpotBugs task
    tasks.withType(SpotBugsTask) {
        group = 'verification'
        description = 'Runs SpotBugs analysis on the project'

        reports {
            xml.enabled = true
            html.enabled = false
            xml.destination = file("${project.buildDir}/reports/spotbugs/spotbugs.xml")
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            //coming from multi variants software component
            staging(MavenPublication) {
                from(components.debug)
                groupId = "android.MVI"
                artifactId = "staging.ageModule"
                version = "1.0.0"

            }

        }

        //applies to publishing all
        repositories {
            maven {
                name = "ageModule"
                url = "${project.buildDir}/ageModule"
            }
        }
    }
}


dependencies {
    implementation("androidx.core:core-ktx:$kotlin_version")

    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.1")
    implementation("androidx.activity:activity-compose:1.7.2")
    implementation("androidx.compose.ui:ui:$compose_ui_version")
    implementation("androidx.compose.ui:ui-tooling-preview:$compose_ui_version")
    implementation("androidx.compose.material:material:$compose_ui_version")
    implementation("androidx.test:monitor:1.5.0")

    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$compose_ui_version")
    debugImplementation("androidx.compose.ui:ui-tooling:$compose_ui_version")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$compose_ui_version")
    implementation("androidx.compose.runtime:runtime-livedata:$compose_ui_version")

    //timber
    implementation("com.jakewharton.timber:timber:5.0.1")

    //reactivex
    implementation("io.reactivex.rxjava2:rxandroid:2.1.1")
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1")
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1")
    implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1")

    //dagger hilt
    implementation("com.google.dagger:hilt-android:2.46")
    kapt("com.google.dagger:hilt-compiler:2.46")
    implementation("com.google.dagger:hilt-android:2.46")
    kapt("androidx.hilt:hilt-compiler:1.0.0")
    kapt("com.google.dagger:hilt-android-compiler:2.37")

    //AppCenter
    implementation("com.microsoft.appcenter:appcenter-analytics:5.0.1")
    implementation("com.microsoft.appcenter:appcenter-crashes:5.0.1")

    //testing
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")

    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0")
    spotbugs("com.github.spotbugs:spotbugs:4.7.1")
}

ext {
    mySourceSets = android.sourceSets.collect { sourceSet ->
        sourceSet.name
    }
    if (!mySourceSets) mySourceSets.add("")

    allBuildTypes = getAllBuildTypes()

    projectRootDir = project.rootDir

}

//requires emulator device
//don't run task that has ./gradlew using green arrow, run from commandline
task runSonarQubePrerequisites {
    group = "sonarqube"
    def currentProject = project.name
    def targetGroup = "jacoco-unittest-reporting"

    dependsOn("runLintTask")

    doLast {
        project.tasks.each { task ->
            if (task.group.toString() == targetGroup) {
                println(":${currentProject}:${task.name}")
                //execute task that generates UnitTest reports
                //buildDir/test-results ko all xml search and send to sonar
                project.exec {
                    workingDir = project.rootDir

                    def taskWithNoModification = ":${currentProject}:${task.name}"
                    println("taskWithNoModification: ${taskWithNoModification}")
                    //:app:testDebugUnitTestCoverage, :app:testEnterpriseQaUnitTestCoverage, :app:testReleaseUnitTestCoverage
                    commandLine "./gradlew", taskWithNoModification //generate unit tests report


                    def removeCoverage = ":${currentProject}:${task.name}".replace("Coverage", "")
                    //:app:testDebugUnitTest, :app:testEnterpriseQaUnitTest, :app:testReleaseUnitTest
                    println("removeCoverage: $removeCoverage")
                    commandLine "./gradlew", removeCoverage //generate test coverage report


                    def replaceTestByCreate = removeCoverage.replace("test", "create")
                    //createDebugUnitTest, createEnterpriseQaUnitTest, createReleaseUnitTest
                    println("replaceTestByCreate: $replaceTestByCreate")

                    def againReplaceUnitTestByCoverageReport = replaceTestByCreate.replace("UnitTest", "CoverageReport")
                    //createRetailStageDebugCoverageReport, createRetailStageEnterpriseQaCoverageReport, createRetailStageReleaseCoverageReport
                    println("againReplaceUnitTestByCoverageReport: $againReplaceUnitTestByCoverageReport")
                    commandLine "./gradlew", againReplaceUnitTestByCoverageReport //for coverage report checking
                }
            }
        }
    }
}

ArrayList<String> getAllBuildTypes() {
    ArrayList<String> buildTypes = []
    android.buildTypes.each { buildType ->
        buildTypes.add(buildType)
    }
    return buildTypes
}

task printAllBuildTypes {
    project.allBuildTypes.each { type ->
        println("mybuildType: $type.name")
    }
}

//don't run task that has ./gradlew using green arrow, run from commandline
task runLintTask(type: Exec) {
    workingDir project.rootDir
    commandLine './gradlew', 'lint'
}

