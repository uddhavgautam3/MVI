import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.dagger.hilt.android")
    id("kotlin-kapt")
    id("maven-publish")
    id("com.github.spotbugs") version '5.0.14'
    id("org.sonarqube") version "4.0.0.2929"
}

apply(from: "$rootDir/scripts/appcenter.gradle")
apply(from: "$rootDir/config/jacoco/jacoco.gradle")
apply(from: "$rootDir/config/checkstyle/checkstyle.gradle.kts")
apply(from: "$rootDir/config/pmd/pmd.gradle.kts")
apply(from: "$rootDir/config/sonarqube/sonarqube.gradle")
apply(from: "$rootDir/scripts/utils.gradle")


android {
    namespace = "com.mvi.app" //for unique R class, this is like a groupId for artifact
    compileSdk = 34
    ndkVersion = "25.2.9519653"

    kapt {
        javacOptions {
            option("-Xmaxerrs", 500)
            option("-Xlint:deprecation", true)
            option("-Xlint:unchecked", true)
        }
        arguments {
            arg("plugin", "org.jetbrains.kotlin.kapt3:kotlin-allopen")
            arg("plugin", "org.jetbrains.kotlin.kapt3:kotlin-noarg")
        }
        useBuildCache = true
    }

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable("TypographyFractions", "TypographyQuotes")
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable("RtlHardcoded", "RtlCompat", "RtlEnabled")
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        checkOnly("NewApi", "InlinedApi")
        // If set to true, turns off analysis progress reporting by lint.
        quiet = true
        // if set to true (default), stops the build if errors are found.
        abortOnError = true
        // if true, only report errors.
        ignoreWarnings = true
    }

    defaultConfig {
        applicationId = "com.mvi.app"
        minSdk = 21
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    buildFeatures {
        compose = true
    }
    composeOptions {
        //https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        kotlinCompilerExtensionVersion = "1.4.8"
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    buildTypes {

        debug {
            debuggable = true
            jniDebuggable = true
            minifyEnabled = false
            shrinkResources = false

            //testCoverageEnabled true //already enabled in jacoco.gradle
            applicationIdSuffix = ".debug"
            versionNameSuffix = "$buildNumber"
        }

        release {
            debuggable = false
            jniDebuggable = false
            minifyEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            versionNameSuffix = "$buildNumber"
            signingConfig = signingConfigs.debug
        }

        enterpriseQa {
            //usually we have only two debug and release. Debug has debugging capabilities e.e.g, Timber debug tree, release not
            //debug = release + debug code. We publish release, and we provide debug to QA and EQA
            //enterpriseQa is a special type of debug which is built from the same branch as release. Debug branch is usually built from feature branch
            //whereas enterpriseQa and release branches are cut from release branch
            initWith(debug) //copies everything from debug buildTypes
            renderscriptDebuggable = true
            renderscriptOptimLevel = 3
            applicationIdSuffix = ".enterpriseQa"
        }

    }

    //Flavors are useful to make different versions of your app. They all can differ in assets, resources, configuration or code.
    //We will use them to make a version of the app that is used for development, hitting the staging API endpoint,
    //and another final version, that calls the production API.
    //define app running environments. E.g., STE06, STE07 etc. these are the servers which server apps of this dimension
    flavorDimensions = ["prod", "env"]
    //order from left to right. e.g., prodFlavorEnvFlavorBuildType = retailStageDebug
    productFlavors {
    //now, product flavor name should go as retailStage
        retail {
            applicationIdSuffix = ".retail"
            versionCode = 151010000
            versionName = "1.0.0"

            dimension = "prod" //first priority

            //we can define data for different product flavors
            manifestPlaceholders = [google_map_key: "retail_map_key",
                                    app_label_name: "retail_map_label"]

            //TODO: Gradle generates a BuildConfig class that contains static configuration constants that are specific to the build at build time.
            buildConfigField "String", "SERVER_URL", "\"http://retail.myserver.com\""

            resValue "string", "base_url", "\"http://retail.myserver.com\""
        }

        stage {
            //free is something like provide users limited functionalities or app with ads, or just chapter 1 and then all other chapters are locked
            applicationIdSuffix = ".stage"
            versionCode = 151010000
            versionName = "1.0.0"

            dimension "env" //second priority

            manifestPlaceholders = [google_map_key: "stage_map_key",
                                    app_label_name: "stage_map_label"]

            //TODO: Gradle generates a BuildConfig class that contains static configuration constants that are specific to the build at build time.
            buildConfigField "String", "SERVER_URL", "\"http://stage.myserver.com\""

            resValue "string", "base_url", "\"http://stage.myserver.com\""
        }

    }

    //source sets for build variants freeDebug, freeRelease, freeEnterpriseQa, paidDebug, paidRelease, and paidEnterpriseQa
    sourceSets {

        main {
            manifest.srcFile("src/main/AndroidManifest.xml")
            java.srcDirs = ["src/main/java"]
            kotlin.srcDirs += "src/main/myKotlin"
            res.srcDirs = ["src/main/res"]
            assets.srcDirs = ["src/main/assets"]
        }

        retailStageDebug {
            manifest.srcFile("src/main/AndroidManifest.xml")
            java.srcDirs = ["src/retailStageDebug/java"]
            kotlin.srcDirs += "src/retailStageDebug/myKotlin"
            res.srcDirs = ["src/retailStageDebug/res"]
            assets.srcDirs = ["src/retailStageDebug/assets"]
        }

        retailStageRelease {
            manifest.srcFile("src/main/AndroidManifest.xml")
            java.srcDirs = ["src/retailStageRelease/java"]
            kotlin.srcDirs += "src/retailStageRelease/myKotlin"
            res.srcDirs = ["src/retailStageRelease/res"]
            assets.srcDirs = ["src/retailStageRelease/assets"]
        }

        retailStageEnterpriseQa {
            manifest.srcFile("src/main/AndroidManifest.xml")
            java.srcDirs = ["src/retailStageEnterpriseQa/java"]
            kotlin.srcDirs += "src/retailStageEnterpriseQa/myKotlin"
            res.srcDirs = ["src/retailStageEnterpriseQa/res"]
            assets.srcDirs = ["src/retailStageEnterpriseQa/assets"]
        }

    }
    dependenciesInfo {
        includeInApk = true
        includeInBundle = true
    }
    buildToolsVersion = "34.0.0"


    //spotbugs configuration
    spotbugs {
        ignoreFailures = false
        showStackTraces = true
        showProgress = true
        effort = 'default' //max
        reportLevel = 'default' //high
        visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
        omitVisitors = [ 'FindNonShortCircuit' ]
        reportsDir = file("$buildDir/reports/spotbugs")
        //includeFilter = file("include.xml")
        excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
        //baselineFile = file("baseline.xml")
        //onlyAnalyze = [ 'com.foobar.MyClass', 'com.foobar.mypkg.*' ]
        maxHeapSize = '4g'
        extraArgs = [ '-nested:false' ]
        jvmArgs = [ '-Duser.language=ja' ]
    }
    // Define SpotBugs task
    tasks.withType(SpotBugsTask) {
        group = 'verification'
        description = 'Runs SpotBugs analysis on the project'

        reports {
            xml.enabled = true
            html.enabled = false
            xml.destination = file("${project.buildDir}/reports/spotbugs/spotbugs.xml")
        }
    }

}


dependencies {
    implementation(fileTree(include: "*.jar", dir: "libs"))
    implementation(fileTree(include: "*.jar", dir: "ext_lib"))

    //implementation(name:"agemodule-release", ext:"aar")
    implementation project(path: ":agemodule") //renamed in settings.gradle

    implementation("androidx.core:core-ktx:$kotlin_version")

    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.1")
    implementation("androidx.activity:activity-compose:1.7.1")
    implementation("androidx.compose.ui:ui:$compose_ui_version")
    implementation("androidx.compose.ui:ui-tooling-preview:$compose_ui_version")
    implementation("androidx.compose.material:material:$compose_ui_version")
    implementation("androidx.test:monitor:1.5.0")

    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$compose_ui_version")
    debugImplementation("androidx.compose.ui:ui-tooling:$compose_ui_version")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$compose_ui_version")
    implementation("androidx.compose.runtime:runtime-livedata:$compose_ui_version")

    //timber
    implementation("com.jakewharton.timber:timber:5.0.1")

    //reactivex
    implementation("io.reactivex.rxjava2:rxandroid:2.1.1")
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1")
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1")
    implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1")

    //dagger hilt
    implementation("com.google.dagger:hilt-android:2.46")
    kapt("com.google.dagger:hilt-compiler:2.46")
    implementation("com.google.dagger:hilt-android:2.46")
    kapt("androidx.hilt:hilt-compiler:1.0.0")
    kapt("com.google.dagger:hilt-android-compiler:2.37")

    //AppCenter
    implementation("com.microsoft.appcenter:appcenter-analytics:4.4.5")
    implementation("com.microsoft.appcenter:appcenter-crashes:4.4.5")

    //testing
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")

    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0")
    spotbugs("com.github.spotbugs:spotbugs:4.7.1")
}

ext {
    mySourceSets = android.sourceSets.collect { sourceSet ->
        sourceSet.name
    }
    if (!mySourceSets) mySourceSets.add("")
}