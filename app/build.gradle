plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
    id 'maven-publish'
}

apply from: "$project.rootDir/scripts/appcenter.gradle"
apply from: "$project.rootDir/config/jacoco/jacoco.gradle"

android {
    namespace 'com.mvi.app' //for unique R class, this is like a groupId for artifact
    compileSdk 34
    ndkVersion '25.2.9519653'

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        checkOnly 'NewApi', 'InlinedApi'
        // If set to true, turns off analysis progress reporting by lint.
        quiet true
        // if set to true (default), stops the build if errors are found.
        abortOnError true
        // if true, only report errors.
        ignoreWarnings true
    }

    defaultConfig {
        applicationId "com.mvi.app"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.4.6"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    signingConfigs {

        debug {
            storeFile file("../keystore.keystore")
            storePassword "Nepal@123!!"
            keyAlias "app"
            keyPassword "Nepal@123!!"
        }

        release {
            storeFile file("../keystore.keystore")
            storePassword "Nepal@123!!"
            keyAlias "app"
            keyPassword "Nepal@123!!"
        }

    }

    buildTypes {

        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            shrinkResources false

            matchingFallbacks = ['debug']
            signingConfig signingConfigs.debug
            //testCoverageEnabled true //already enabled in jacoco.gradle
            applicationIdSuffix '.debug'
            versionNameSuffix ".${getBuildNumber()}"
        }

        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            matchingFallbacks = ['release']
            signingConfig signingConfigs.release
            versionNameSuffix ".${getBuildNumber()}"
        }

        enterpriseQa {
            //usually we have only two debug and release. Debug has debugging capabilities e.e.g, Timber debug tree, release not
            //debug = release + debug code. We publish release, and we provide debug to QA and EQA
            //enterpriseQa is a special type of debug which is built from the same branch as release. Debug branch is usually built from feature branch
            //whereas enterpriseQa and release branches are cut from release branch
            initWith debug //copies everything from debug buildTypes
            renderscriptDebuggable true
            renderscriptOptimLevel 3
            applicationIdSuffix '.enterpriseQa'
        }

    }

    //define app running environments. E.g., STE06, STE07 etc. these are the servers which server apps of this dimension
    flavorDimensions = ["default"]
    productFlavors {

        retail {
            applicationIdSuffix ".retail"
            versionCode 151010000
            versionName "1.0.0"
            signingConfig signingConfigs.release

            dimension 'default'

            //we can define data for different product flavors
            manifestPlaceholders = [google_map_key: "retail_map_key",
                                    app_label_name: "retail_map_label"]

            //Gradle generates a BuildConfig class that contains static configuration constants that are specific to the build at build time.
            buildConfigField "String", "SERVER_URL", "\"http://retail.myserver.com\""

            resValue "string", "base_url", "\"http://retail.myserver.com\""
        }

        free {
            //free is something like provide users limited functionalities or app with ads, or just chapter 1 and then all other chapters are locked
            applicationIdSuffix ".free"
            versionCode 151010000
            versionName "1.0.0"
            signingConfig signingConfigs.release

            dimension 'default'

            manifestPlaceholders = [google_map_key: "free_map_key",
                                    app_label_name: "free_map_label"]

            //Gradle generates a BuildConfig class that contains static configuration constants that are specific to the build at build time.
            buildConfigField "String", "SERVER_URL", "\"http://free.myserver.com\""

            resValue "string", "base_url", "\"http://free.myserver.com\""
        }

    }

    //source sets for build variants freeDebug, freeRelease, freeEnterpriseQa, paidDebug, paidRelease, and paidEnterpriseQa
    sourceSets {

        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            kotlin.srcDirs += 'src/main/myKotlin'
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        retailDebug {
            manifest.srcFile 'src/retailDebug/AndroidManifest.xml'
            java.srcDirs = ['src/retailDebug/java']
            kotlin.srcDirs += 'src/retailDebug/myKotlin'
            res.srcDirs = ['src/retailDebug/res']
            assets.srcDirs = ['src/retailDebug/assets']
        }

        retailRelease {
            manifest.srcFile 'src/retailRelease/AndroidManifest.xml'
            java.srcDirs = ['src/retailRelease/java']
            kotlin.srcDirs += 'src/retailRelease/myKotlin'
            res.srcDirs = ['src/retailRelease/res']
            assets.srcDirs = ['src/retailRelease/assets']
        }

        retailEnterpriseQa {
            manifest.srcFile 'src/retailEnterpriseQa/AndroidManifest.xml'
            java.srcDirs = ['src/retailEnterpriseQa/java']
            kotlin.srcDirs += 'src/retailEnterpriseQa/myKotlin'
            res.srcDirs = ['src/retailEnterpriseQa/res']
            assets.srcDirs = ['src/retailEnterpriseQa/assets']
        }

        freeDebug {
            manifest.srcFile 'src/freeDebug/AndroidManifest.xml'
            java.srcDirs = ['src/freeDebug/java']
            kotlin.srcDirs += 'src/freeDebug/myKotlin'
            res.srcDirs = ['src/freeDebug/res']
            assets.srcDirs = ['src/freeDebug/assets']
        }

        freeRelease {
            manifest.srcFile 'src/freeRelease/AndroidManifest.xml'
            java.srcDirs = ['src/freeRelease/java']
            kotlin.srcDirs += 'src/freeRelease/myKotlin'
            res.srcDirs = ['src/freeRelease/res']
            assets.srcDirs = ['src/freeRelease/assets']
        }

        freeEnterpriseQa {
            manifest.srcFile 'src/freeEnterpriseQa/AndroidManifest.xml'
            java.srcDirs = ['src/freeEnterpriseQa/java']
            kotlin.srcDirs += 'src/freeEnterpriseQa/myKotlin'
            res.srcDirs = ['src/freeEnterpriseQa/res']
            assets.srcDirs = ['src/freeEnterpriseQa/assets']
        }

    }

}


dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation fileTree(include: '*.jar', dir: 'ext_lib')

    //implementation(name:'agemodule-release', ext:'aar')
    implementation project(path: ":agemodule") //renamed in settings.gradle

    implementation "androidx.core:core-ktx:$kotlin_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.1'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.material:material:$compose_ui_version"

    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_ui_version"

    //timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    //reactivex
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.6.1"

    //dagger hilt
    implementation "com.google.dagger:hilt-android:2.46"
    kapt "com.google.dagger:hilt-compiler:2.46"
    implementation 'com.google.dagger:hilt-android:2.46'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    kapt 'com.google.dagger:hilt-android-compiler:2.37'

    //AppCenter
    implementation "com.microsoft.appcenter:appcenter-analytics:4.4.5"
    implementation "com.microsoft.appcenter:appcenter-crashes:4.4.5"

    //testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

}