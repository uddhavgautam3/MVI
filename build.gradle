buildscript {
    apply from: 'dependencies.gradle'
    dependencies {
        classpath deps.jacoco.gradle_plugin
        classpath deps.spotbugs.gradle_plugin
    }
    addRepos(repositories)
}// Top-level build file where you can add configuration options common to all sub-projects/modules.
//IDE plugins
plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'com.google.dagger.hilt.android' version '2.44' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.20' apply false //kotlin IDE plugin for gradle
    id 'maven-publish'
}

apply from: "${project.rootDir}/build_variants.gradle"
//spotbugs for build and flavor variants
createFlavorTypeVariants {
    type, flavor -> {
        def myType = "spotbugs${flavor.capitalize()}${type.capitalize()}"
        task "${myType.capitalize()}"(type:DefaultTask) {
            group 'Verification'
            description 'Run Spotbugs on the whole project'
        }
    }
}

subprojects {
    //includes checkstyle, spotbugs, pmd
    apply from: "$project.rootDir/config/codequality.gradle"
    afterEvaluate {
        //syntax: gradleTask.dependsOn(otherGradleTask)
        //before build of any subproject taskCheckStyle should run
        preBuild.dependsOn('taskCheckStyle')
        //we test and check the same testCheckStyle task to see its integrity
        check.dependsOn('taskCheckStyle')
        preBuild.dependsOn('taskPmd')
        check.dependsOn('taskPmd')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

static String getBuildNumber() {
    return getPropertyOrEnv('BUILD_NUMBER', 'LocalDebug')
}

static String getPropertyOrEnv(name, defaultValue = '') {
    def prop = System.properties[name]
    if (prop == null) {
        prop = System.getenv(name)
    }
    if (prop == null) {
        return defaultValue
    }
    return prop
}