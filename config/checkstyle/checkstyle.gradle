//Every plugin has several information like configuration, their tasks, report generation, integration with other tasks, configuring options etc.
//So applying plugin is like extending features

apply(plugin: "checkstyle") //applying plugin is like importing classes

// apply plugin: "checkstyle" or apply(plugin: "checkstyle") same thing.
// First is more common in Groovy, where checkstyle string is a value of plugin id
// second is using a named parameter syntax aka method call with a map argument


//only Project Settings, Plugins or build scripts file scripts contain plugins {} blocks
/*plugins {
    id "checkstyle"
}*/

/*plugins {
    checkstyle //this is shorthand provided by the Plugins DSL.  Simply enter the value of Plugins id
}*/


//checkstyle plugin configuration block. The keyword checkstyle is provided by checkstyle plugin
checkstyle {
    toolVersion = "10.11.0"

    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")

    configProperties['ignoreFailures'] = false
    configProperties['showViolations'] = true
    configProperties['lineWidth'] = 120
    configProperties['checkstyleSuppressions'] = project.file("${rootDir}/config/checkstyle/suppressions.xml")
    configProperties['checkstyleSuppressionConfigDir'] = project.file("${rootDir}/config/checkstyle")
}

//create a new configuration named checkstyle within the Gradle build script.
configurations {
    //basically we now get checkstyle plugin configuration block into our gradle configuration block
    checkstyle //creates a configuration name with checkstyle that has its own lifecycle
}

//tasks = Project.getTask(). tasks is a TaskContainer. TaskContainer holds Task Type
//tasks are then run so, we can define how much heap memory we should allocate, and after tasks complete where to generate reports etc.
tasks.withType(Checkstyle) {
    minHeapSize = "1000m"
    maxHeapSize = "4g"
    reports {
        xml.required = true
        html.required = true
        html.stylesheet = resources.text.fromFile("${rootDir}/config/checkstyle/xsl/checkstyle-simple.xsl")
    }
}


project.afterEvaluate { project ->
    setupAndroidCheckStyle()
}

def setupAndroidCheckStyle() {
    def mySourceSets = android.sourceSets.collect { sourceSet ->
        sourceSet.name
    }
    if (!mySourceSets) mySourceSets.add("")
    mySourceSets.each { sourceSet ->
        tasks.create("checkstyle${sourceSet.capitalize()}", Checkstyle) {
            group = 'verification'
            description = "Runs check task for ${sourceSet.capitalize()} source set"

            source = fileTree(dir: "src/${sourceSet}", includes: ["**/*.java", "**/*.kt"], excludes: ["**/R.java", "**/BuildConfig.java", "**/gen/**"])
            // include("**/*.java", "**/*.kt")
            // exclude("**/R.java", "**/BuildConfig.java", "**/gen/**")
            classpath = files()
        }
    }
}

task setupAndroidCheckStyle() {
    def mySourceSets = android.sourceSets.collect { sourceSet ->
        sourceSet.name
    }
    if (!mySourceSets) mySourceSets.add("")
    mySourceSets.each { sourceSet ->
        println("sourceSet name: $sourceSet")
    }

}
