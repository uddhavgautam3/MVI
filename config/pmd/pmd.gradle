apply(plugin: "pmd")

pmd {
    toolVersion = "6.55.0"
    //ruleSetFiles = files("path/to/ruleset1.xml", "path/to/ruleset2.xml")
    //has priority over ruleSets because ruleSetFiles is our configuration based on our need
    //where ruleSets is from pmd plugin
    ruleSetFiles = files("${rootDir}/config/pmd/pmdmain.xml")
    ruleSets = ruleSets + "android.xml"
}

configurations {
    pmd
}

tasks.withType(Pmd) {
    ignoreFailures = true // Set to true to continue the build even if PMD violations are found

    reports {
        xml.required = true
        xml.destination = file("${buildDir.absolutePath}/reports/pmd/pmd.xml")
        html.required = true
        html.destination = file("$buildDir/reports/pmd/report.html")
    }
}

project.afterEvaluate {
    task pmdTask {
        group = 'verification'
        description = "Runs pmd task"
            setupAndroidPmd()
    }
}

def setupAndroidPmd() {
    def mySourceSets = android.sourceSets.collect { sourceSet ->
        sourceSet.name
    }
    if (!mySourceSets) mySourceSets.add("")
    mySourceSets.each { sourceSet ->
        tasks.create("pmd${sourceSet.capitalize()}", Pmd) {
            group = 'verification'
            description = "Runs pmd task for ${sourceSet.capitalize()} source set"


            source = fileTree(dir: "src/${sourceSet}",
                    includes: ["**/*.java", "**/*.kt"],
                    excludes: ["**/R.java", "**BuildConfig.java", "**/gen/**", "**/generated/**", "**/BuildConfig.java", "**/R.java"])

            classpath = files()
        }
    }
}


