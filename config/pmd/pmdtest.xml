<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PMD ruleset for Checkstyle"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
                             http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>
        PMD ruleset for Checkstyle tests
    </description>
    <exclude-pattern>.*/src/main/.*</exclude-pattern>


    <rule ref="category/java/design.xml/NcssCount">
        <properties>
            <!-- We want to keep it all in one place. -->
            <property name="classReportLevel" value="1000" />
            <!-- A big enough value to satisfy the most cases. -->
            <property name="methodReportLevel" value="100" />
            <!-- GeneratedJavaTokenTypesTest.testTokenNumbering' is simple but long as it rechecks
                   each token one by one. Same goes for
                 GeneratedJavadocTokenTypesTest#testTokenNumbers.
                 JavadocTokenTypesTest.TokenValues contains several asserts as it checks each
                   token explicitly.
                 IndentationCheckTest has a lot of cases. -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='JavadocTokenTypesTest']
                       //MethodDeclaration[@Name='testTokenValues']
                   | //ClassOrInterfaceDeclaration[@SimpleName='GeneratedJavaTokenTypesTest']
                       //MethodDeclaration[@Name='testTokenNumbering']
                   | //ClassOrInterfaceDeclaration[@SimpleName='GeneratedJavadocTokenTypesTest']
                       //MethodDeclaration[@Name='testTokenNumbers']
                   | //ClassOrInterfaceDeclaration[@SimpleName='IndentationCheckTest']" />
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessiveMethodLength">
        <properties>
            <!-- GeneratedJavaTokenTypesTest.testTokenNumbering' is simple but long as it rechecks
                   each token one by one. Same goes for GeneratedJavadocTokenTypesTest#testTokenNumbers.
                 ParenPadCheckTest.testNospaceWithComplexInput is intended to keep all in one method.
                 JavadocTokenTypesTest.TokenValues contains several asserts as it checks each
                   token explicitly.
                MainTest.testGenerateXpathSuppressionOptionOne requires a very long 'expected' string
            -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='GeneratedJavaTokenTypesTest']
                        //MethodDeclaration[@Name='testTokenNumbering']
                    | //ClassOrInterfaceDeclaration[@SimpleName='ParenPadCheckTest']
                        //MethodDeclaration[@Name='testNospaceWithComplexInput']
                    | //ClassOrInterfaceDeclaration[@SimpleName='ParenPadTest']
                        //MethodDeclaration[@Name='testMethodParen']
                    | //ClassOrInterfaceDeclaration[@SimpleName='JavadocTokenTypesTest']
                        //MethodDeclaration[@Name='testTokenValues']
                    | //ClassOrInterfaceDeclaration[@SimpleName='GeneratedJavadocTokenTypesTest']
                        //MethodDeclaration[@Name='testTokenNumbers']
                    | //ClassOrInterfaceDeclaration[@SimpleName='MainTest']
                        //MethodDeclaration[@Name='testGenerateXpathSuppressionOptionOne']" />
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert">
        <!-- PMD cannot find assert if it is located in private method of this class called from
               the test method or method of another class. -->
        <properties>
            <!-- In AllChecksTest, AstRegressionTest and ImportControlCheckTest
                 PMD does not find asserts in private methods of the test class called from the
                   test method.
                 In MainTest PMD does not find asserts in lambdas called in the method
                   exit.checkAssertionAfterwards.
                 In AstRegressionTest PMD does not find asserts in inner classes methods called
                   from the test method.
                 In XdocsPagesTest PMD does not find asserts in lambdas.
                 All test classes which starts with XpathRegression have asserts inside parent's method.
                 In ArchUnitTest, ArchUnitSuperClassTest, ImmutabilityTest, ArchUnitCyclesCheckTest
                 assertion calls are not required as they are called by the library -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='AllChecksTest'
                     or @SimpleName='AstRegressionTest'
                     or @SimpleName='ImportControlCheckTest']//PrimaryPrefix/Name[@Image='verify']
                   | //ClassOrInterfaceDeclaration[@SimpleName='MainTest']
                       //PrimaryPrefix//Name[starts-with(@SimpleName, 'assert')]
                   | //ClassOrInterfaceDeclaration[@SimpleName='XdocsPagesTest']
                       //MethodDeclaration[@Name='testAllChecksPresentOnAvailableChecksPage']
                   | //ClassOrInterfaceDeclaration[@SimpleName='XdocsJavaDocsTest']
                       //MethodDeclaration[@Name='testAllCheckSectionJavaDocs']
                   | //ClassOrInterfaceDeclaration[starts-with(@SimpleName,'XpathRegression')]
                       //MethodDeclaration
                   | //ClassOrInterfaceDeclaration[@SimpleName='ImmutabilityTest']
                       //MethodDeclaration
                   | //ClassOrInterfaceDeclaration[@SimpleName='ArchUnitTest']
                       //MethodDeclaration
                   | //ClassOrInterfaceDeclaration[@SimpleName='ArchUnitSuperClassTest']
                       //MethodDeclaration
                   | //ClassOrInterfaceDeclaration[@SimpleName='ArchUnitCyclesCheckTest']
                       //MethodDeclaration" />
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation">
        <properties>
            <!-- A false positive. -->
            <property name="violationSuppressXPath"
                value="//ClassOrInterfaceDeclaration[@SimpleName='CommitValidationTest']" />
        </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts">
        <properties>
            <property name="maximumAsserts" value="11" />
            <!-- GeneratedJavadocTokenTypesTest.testTokenNumbers and
                GeneratedJavadocTokenTypesTest.testRuleNumbers contains several asserts
                as they check each token and each rule explicitly.
               JavadocTokenTypes.testTokenValues contains several asserts as it checks each
                token explicitly. -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='JavadocTokenTypesTest']
                        //MethodDeclaration[@Name='testTokenValues']
                    | //ClassOrInterfaceDeclaration[@SimpleName='GeneratedJavaTokenTypesTest']
                        //MethodDeclaration[@Name='testTokenNumbering']
                    | //ClassOrInterfaceDeclaration[@SimpleName='GeneratedJavadocTokenTypesTest']
                        //MethodDeclaration[@Name='testTokenNumbers']
                    | //ClassOrInterfaceDeclaration[@SimpleName='ParseTreeTablePresentationTest']
                        //MethodDeclaration[@Name='testGetValueAtDetailNode']" />
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ConfusingTernary">
        <properties>
            <!-- A false positive: commit validation is a sequence of checks, if we shuffle them
                it would be broken. -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='CommitValidationTest']
                        //MethodDeclaration[@Name='validateCommitMessage']" />
        </properties>
    </rule>

    <rule ref="category/java/design.xml/UseObjectForClearerAPI">
        <properties>
            <!-- This is checking for amount of String arguments more than 3 (hardcoded).
               Extra abstraction(object) for single method does not make code more readable or
               easy to maintain. The rule should also only check public methods but has a bug.
               Suppress the false-positives. -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='SuppressionXpathSingleFilterTest']
                        //MethodDeclaration[@Name='createSuppressionXpathSingleFilter']
                    | //ClassOrInterfaceDeclaration[ @SimpleName='XdocsPagesTest']
                        //MethodDeclaration[@Name='validateRuleNameOrder']" />
        </properties>
    </rule>
    <rule ref="category/java/errorprone.xml/CloseResource">
        <properties>
            <!-- we do close streams in special methods -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='XdocsPagesTest']
                        //MethodDeclaration[@Name='getModulePropertyExpectedValue']
                 | //ClassOrInterfaceDeclaration[@SimpleName='DefaultLoggerPowerTest']
                     //MethodDeclaration[@Name='testNewCtor']
                 | //ClassOrInterfaceDeclaration[@SimpleName='ImportControlLoaderPowerTest']
                     //MethodDeclaration[@Name='testInputStreamThatFailsOnClose']
                 | //ClassOrInterfaceDeclaration[@SimpleName='ImportControlLoaderPowerTest']
                     //MethodDeclaration[@Name='testInputStreamFailsOnRead']
                 | //ClassOrInterfaceDeclaration[@SimpleName='XpathFileGeneratorAuditListenerTest']
                     //MethodDeclaration[@Name='verifyOutput']
                 | //ClassOrInterfaceDeclaration[@SimpleName='CommonUtilTest']
                     //MethodDeclaration[@Name='testClose']" />
        </properties>
    </rule>
    <rule ref="category/java/multithreading.xml/DoNotUseThreads">
        <properties>
            <!-- We use thread to limit the stack size for a test method. -->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@SimpleName='TestUtil']
                        //MethodDeclaration[@Name='getResultWithLimitedResources']" />
        </properties>
    </rule>
</ruleset>