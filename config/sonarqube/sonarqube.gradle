//should run below commands in order
// ./gradlew :app:createRetailStageDebugCoverageReport
//  ./gradlew :app:testRetailStageDebugUnitTest

// ./gradlew :agemodule:createDebugCoverageReport
//  ./gradlew :agemodule:testDebugUnitTest

//after running above commands, we should run ./gradlew sonar. This is how it works in pipeline-script.groovy
sonar {
    properties {
        property("sonar.projectKey", "sonar_jenkins_mvi")
        property("sonar.projectName", "sonar_jenkins_mvi")
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.token", "squ_9e08213394c71294274213703caa1cd3cf160ead")
        property("sonar.core.codeCoveragePlugin", "jacoco")

        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
    }
}

tasks.named("sonar").configure {
    group = "sonar"
    doFirst {
        def modulePaths = []
        subprojects {
            modulePaths.add(projectDir)
        }
        modulePaths.each { modulePath ->
            //jacoco xml report
            sonarqube.properties.property("sonar.coverage.jacoco.xmlReportPaths",
                    "${modulePath}/build/reports/coverage/androidTest/retailStage/debug/connected/report.xml")
            //lint xml report
            sonarqube.properties.property("sonar.android.lint.reportPaths",
                    "${modulePath}/build/reports/lint/android_lint.xml")
        }
    }
}
